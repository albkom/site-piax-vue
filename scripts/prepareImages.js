import fs from 'fs'
import path from 'path'
const dir = './public/img'
const outputFile = './src/db/db.images.ts'
// const publicDir = './public/img'

function getAllFiles(dirPath, arrayOfFiles = []) {
  console.log(dirPath)
  const files = fs.readdirSync(dirPath)
  files.forEach((file) => {
    const fullPath = path.join(dirPath, file)
    if (fs.statSync(fullPath).isDirectory()) {
      getAllFiles(fullPath, arrayOfFiles)
    } else {
      // Store relative path from imagesDir
      arrayOfFiles.push(path.relative(dir, fullPath).replace(/\\/g, '/'))
    }
  })
  return arrayOfFiles
}

const files = getAllFiles(dir)
// console.log(files)

const grouped = files.reduce((acc, file) => {
  const [root, folder, ...rest] = file.split('/');
  if (!acc[folder]) acc[folder] = { mobile: [], desktop: [] };
  if (root.toLowerCase().includes('mobile')) {
    acc[folder].mobile.push(file);
  } else if (root.toLowerCase().includes('desktop')) {
    acc[folder].desktop.push(file);
  }
  return acc;
}, {});

const content = `// Auto-generated by prepare-images.js
export type ImageGroup = {
  mobile: string[];
  desktop: string[];
};
export const images: Record<string, ImageGroup> = ${JSON.stringify(grouped, null, 2)};
`

fs.writeFileSync(outputFile, content, 'utf8')
console.log(`Exported ${files.length} images to images.ts`)
